#define ButtonPin 16    //Define all pins used and SD CS
#define SensorPin 15
#define gLED 8
#define rLED 13
#define BatteryPin 9
#define chipSelect 4

#include <SPI.h>    //Setup SD card for use
#include "SdFat.h"
SdFat sd;
SdFile ThisFile;

byte counter = 0;
byte ButtonRead;
byte ButtonState = LOW;
#define Debounce_Count 100   //Sample size for debounce

#define n 20  //n value for SMA (Simple Moving Average)
int readings[n];
byte readIndex = 0;
int total;
int SMA;

bool Switch = false;  //The Switch used to start and stop data loging
#define CutOFF 543   //Battery voltage cut off level (analog)
// (543 * 2 * 3.3)/1024 = 3.5V

#define DelayTime 1000    //Delay period between samples in uSec
uint64_t PastMicros = 0;    //Holds previous sample time

void setup() {
  pinMode(ButtonPin, INPUT);    //Set pins as output or input
  pinMode(SensorPin, INPUT);
  pinMode(BatteryPin, INPUT);
  pinMode(rLED, OUTPUT);
  pinMode(gLED, OUTPUT);
  digitalWrite(rLED, LOW);    //Make sure the Red LED is initially off

  sd.begin(chipSelect, SD_SCK_MHZ(48));  //Connect to the SD card

  for (byte InitReading = 0; InitReading < n; InitReading++) {
    readings[InitReading] = 0;    //setup initial SMA array
  }
}

void BatteryMonitor() {
  total -= readings[readIndex];   //Subtract earliest reading from array
  readings[readIndex] = analogRead(BatteryPin);   //Add new reading to array
  total += readings[readIndex];   //Sum new array
  readIndex += 1;   //increment array index up by 1
  if (readIndex >= n) {   //if the index reaches the end of the array
    readIndex = 0;    //start over at the beging of the array
  }
  SMA = total / n;
}

void Debounce() {
  ButtonReading = digitalRead(ButtonPin);

  if (ButtonState == false) {
    if (ButtonReading == ButtonState) {
      PrevMillis = millis();
    }
    if (millis() - PrevMillis > 100) {
      ButtonState = true;
    }
  }

  if (ButtonState == true) {
    if (ButtonReading == ButtonState) {
      PrevMillis = millis();
    }
    if (millis() - PrevMillis > 100) {
      Switch = !Switch;
      ButtonState = false;
    }
  }
}

void Create_Open_Start() {
  digitalWrite(gLED, HIGH);
  char DataFile[10];
  strcpy(DataFile, "File00.TXT");
  for (byte i = 0; i < 100; i++) {
    DataFile[4] = '0' + i / 10;
    DataFile[5] = '0' + i % 10;
    if (! sd.exists(DataFile)) {
      break;
    }
  }
  ThisFile.open(DataFile, O_CREAT | O_APPEND | O_WRITE);
  Switch = true;
  delayMicroseconds(500000);
  digitalWrite(gLED, LOW);
}

void EndFile () {
  digitalWrite(rLED, HIGH);
  ThisFile.close();
  Switch = false;
  delayMicroseconds(500000);
  digitalWrite(rLED, LOW);
}

void loop() {
  if (ButtonState == HIGH) {   //check if the button is pressed
    //change digitalRead to ButtonState if debounce is used
    if (Switch == false) {    //if Switch is off, create a new File##
      Create_Open_Start();    //Start Logging process
    }
    else {   //if button was pressed but the Switch was already on
      EndFile();    //Stop Logging process
    }
  }
  BatteryMonitor();
  if (Switch == true && micros() - PastMicros >= DelayTime) {  //if the Switch is on and delay has passed
    ThisFile.println(analogRead(SensorPin));  //log data reading from the SensorPin into the File##
    if (SMA < CutOFF) { //if the Battery's voltage is too low
      EndFile();    //Stop Logging process
    }
  }
}   // Code continues from beginning of the loop at line 96
